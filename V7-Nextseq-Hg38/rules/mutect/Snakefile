rule mutect:
    # Preprocessing to do a realignment of the reads with GATK
    input:
        knowns=lambda wildcards: ["%s%s%s%s" % (wildcards.prefix, config['dirs']['references'], known['file'], ending) for known in get_reference_knowns(get_role(wildcards.entity.split('/')[0], wildcards.entity.split('/')[-1], 'tumor', SAMPLESHEETS), SAMPLESHEETS, config, 'mutect') for ending in ['', ('.tbi' if known['file'].endswith('.gz') else '.idx')]],
        exometrack=lambda wildcards: "%s%s%s" % (config['dirs']['prefix'], config['dirs']['references'], get_reference_exometrack(get_role(wildcards.entity.split('/')[0], wildcards.entity.split('/')[-1], 'tumor', SAMPLESHEETS), SAMPLESHEETS, config)),
        references=lambda wildcards: ["%s%s%s%s" % (wildcards.prefix, config['dirs']['references'], get_reference_genome(get_role(wildcards.entity.split('/')[0], wildcards.entity.split('/')[-1], 'tumor', SAMPLESHEETS), SAMPLESHEETS, config)['file'], ending) for ending in config['endings_bwa']],
        jdk_bin="{prefix}%sjdk1.7.0_51/bin/java" % config['dirs']['references'],
        mutect117="%s%smutect-1.1.7.jar" % (config['dirs']['prefix'], config['dirs']['references']),
        cosmic=lambda wildcards: ["%s%s%s%s" % (wildcards.prefix, config['dirs']['references'], cosmic, ending) for cosmic in [get_reference_genome(get_role(wildcards.entity.split('/')[0], wildcards.entity.split('/')[-1], 'tumor', SAMPLESHEETS), SAMPLESHEETS, config)['cosmic']] for ending in ['', '.idx'] if cosmic is not None],
        tumor=lambda wildcards: "%s%s%s/%s.reCal.reAl.nodup.srt.bam" % (wildcards.prefix, config['dirs']['intermediate'], config['stepnames']['gatk_PrintReads'], get_role(wildcards.entity.split('/')[0], wildcards.entity.split('/')[-1], 'tumor', SAMPLESHEETS)),
        healthy=lambda wildcards: "%s%s%s/%s.reCal.reAl.nodup.srt.bam" % (wildcards.prefix, config['dirs']['intermediate'], config['stepnames']['gatk_PrintReads'], get_role(wildcards.entity.split('/')[0], wildcards.entity.split('/')[-1], 'healthy', SAMPLESHEETS)),
    output:
        csv="{prefix}%s%s/{entity}.all_calls.csv" % (config['dirs']['intermediate'], config['stepnames']['mutect']),
        vcf="{prefix}%s%s/{entity}.all_calls.vcf" % (config['dirs']['intermediate'], config['stepnames']['mutect']),
    log:
        mutect="{prefix}%s%s/{entity}.mutect.log" % (config['dirs']['logs'], config['stepnames']['mutect']),
        post="{prefix}%s%s/{entity}.post.log" % (config['dirs']['logs'], config['stepnames']['mutect']),
    benchmark:
        "{prefix}%s%s/{entity}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['mutect'])
    conda:
        "envs/spike_mutect.yaml"
    threads:
        1
    params:
        knowns_settings=lambda wildcards: [' --dbsnp %s%s%s ' % (wildcards.prefix, config['dirs']['references'], known['file']) for known in get_reference_knowns(get_role(wildcards.entity.split('/')[0], wildcards.entity.split('/')[-1], 'tumor', SAMPLESHEETS), SAMPLESHEETS, config, 'mutect')],
        cosmic=lambda wildcards: [" --cosmic %s%s%s" % (wildcards.prefix, config['dirs']['references'], cosmic) for cosmic in [get_reference_genome(get_role(wildcards.entity.split('/')[0], wildcards.entity.split('/')[-1], 'tumor', SAMPLESHEETS), SAMPLESHEETS, config)['cosmic']] if cosmic is not None]
    shell:
        "{input.jdk_bin}"
        " -Xmx6g -XX:ParallelGCThreads={threads}"
        " -jar {input.mutect117}"
        " --analysis_type MuTect"
        " --reference_sequence {input.references[0]}"
        "{params.knowns_settings}"
        "{params.cosmic}"
        " --intervals {input.exometrack}"
        " --input_file:normal {input.healthy}"
        " --input_file:tumor {input.tumor}"
        " --out {output.csv}"
        " --vcf {output.vcf}"
        " 2> {log.mutect}"

        # COMMAND="/opt/Oracle_Java/jre1.7.0_51/bin/java $GATK_OPTS -jar $MUTECTJAR \
        # --analysis_type MuTect \
        # --reference_sequence $REF \
        # --dbsnp $DBSNP \
        # --cosmic $GATKRES_PATH/CosmicCodingMuts_v63_300113.vcf \
        # --intervals $EXOME_TRACK \
        # --input_file:normal $NORMAL_BAM \
        # --input_file:tumor $TUMOR_BAM \
        # --out $OUTPUT.all_calls.csv \
        # --vcf $OUTPUT.all_calls.vcf \
        #  && (grep -v REJECT $OUTPUT.all_calls.csv > ${OUTPUT}_KEEP_only.csv; grep -v REJECT $OUTPUT.all_calls.vcf > ${OUTPUT}_KEEP_only.vcf; gzip $OUTPUT.all_calls.csv; vcfzipNindex.sh $OUTPUT.vcf)"
        # ### other parameters that I currently do not use:
        # #--coverage_file $OUTPUT.mutect.coverage.wig.txt # these are just big files that we currently do not use
        # #--fraction_contamination 0.02 \ # read this in a forum but dont know if this is suitable for us
        # # --only_passing_calls \ # I do something comparable with "grep -v REJECT"
        # # I did not use threading, see below, because I suspect this to be the cause for mutect no not finish properly
        # # --num_threads 4 \
