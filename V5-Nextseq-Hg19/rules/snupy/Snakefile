rule snupy_upload_background:
    input:
        # snv calling against background ...
        # ... via platypus
        ptp=lambda wildcards: ['%s%s%s/%s.ptp.annotated.filtered.indels.vcf' % (wildcards.prefix, config['dirs']['intermediate'], config['stepnames']['platypus_filtered'], sample['sample'])
                               for sample in get_samples(SAMPLESHEETS[(SAMPLESHEETS['Sample_Project'] == wildcards.project) & (SAMPLESHEETS['spike_entity_id'] == wildcards.entity)], config)],
        # ... via GATK
        gatk=lambda wildcards: ['%s%s%s/%s.gatk.%ssnp_indel.vcf' % (wildcards.prefix, config['dirs']['intermediate'], config['stepnames']['gatk_CombineVariants'], sample['sample'], isrelax)
                                for sample in get_samples(SAMPLESHEETS[(SAMPLESHEETS['Sample_Project'] == wildcards.project) & (SAMPLESHEETS['spike_entity_id'] == wildcards.entity)], config)
                                for isrelax in ['',
        # SMJ 26.09.2018: I am not uploading the relaxed files, since Sebastian Ginzel told me that nobody is using them and snupy could recreate those from the normal version via filtering
                                                           #'relax.'
                                               ]],
    output:
        "{prefix}%s%s/{snupy_instance}/{project}/{entity}.background.uploaded" % (config['dirs']['intermediate'], config['stepnames']['snupy_upload'])
    log:
        "{prefix}%s%s/{snupy_instance}/{project}/{entity}.background.log" % (config['dirs']['logs'], config['stepnames']['snupy_upload'])
    benchmark:
        "{prefix}%s%s/{snupy_instance}/{project}/{entity}.background.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['snupy_upload'])
    threads:
        1
    run:
        upload_to_snupy(wildcards.project, wildcards.entity, input, config, SAMPLESHEETS, output, log, _type='background', snupy_instance=wildcards.snupy_instance)


rule snupy_upload_tumornormal:
    input:
        # tumor/normal calling ...
        # ... via mutect
        tumornormal_mutect="{prefix}%s%s/{project}/{entity}.all_calls.vcf" % (config['dirs']['intermediate'], config['stepnames']['mutect']),
        # ... via varscan2
        tumornormal_varscan=lambda wildcards: '%s%s%s/%s/%s.%s.vcf' % (wildcards.prefix, config['dirs']['intermediate'], config['stepnames']['merge_somatic'], wildcards.project, wildcards.entity, 'indel_snp' if config['projects'][wildcards.project]['species'] == 'mus musculus' else 'snp.somatic_germline'),
        # ... since freeC does not generate a VCF and I think snupy cannot display freeC results, they don't get uploaded here

        # ... excavator
        tumornormal_excavator=directory("{prefix}%s%s/{project}/{entity}" % (config['dirs']['intermediate'], config['stepnames']['excavator_somatic'])),
    output:
        "{prefix}%s%s/{snupy_instance}/{project}/{entity}.tumornormal.uploaded" % (config['dirs']['intermediate'], config['stepnames']['snupy_upload'])
    log:
        "{prefix}%s%s/{snupy_instance}/{project}/{entity}.tumornormal.log" % (config['dirs']['logs'], config['stepnames']['snupy_upload'])
    benchmark:
        "{prefix}%s%s/{snupy_instance}/{project}/{entity}.tumornormal.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['snupy_upload'])
    threads:
        1
    run:
        # excavator rules produces a directory. Thus, we need to manually define the correct filepath to the VCF file
        # for other programs, the VCF file is directly specified as the input.
        vcf_files = []
        for file in input:
            if config['stepnames']['excavator_somatic'] in file:
                tumor = get_role(wildcards.project, wildcards.entity, 'tumor', SAMPLESHEETS).split('/')[-1]
                vcf_files.append("%s%s%s/%s/%s/Results/%s/EXCAVATORRegionCall_%s.vcf" % (wildcards.prefix, config['dirs']['intermediate'], config['stepnames']['excavator_somatic'], wildcards.project, wildcards.entity, tumor, tumor))
                continue
            vcf_files.append(file)
        upload_to_snupy(wildcards.project, wildcards.entity, vcf_files, config, SAMPLESHEETS, output, log, _type='tumornormal', snupy_instance=wildcards.snupy_instance)


rule snupy_upload_trio:
    input:
        # trio calling via varscan2
        trio="{prefix}%s%s/{project}/{entity}.var2denovo.vcf" % (config['dirs']['intermediate'], config['stepnames']['writing_headers']),
        # ... excavator
        trio_excavator=directory("{prefix}%s%s/{project}/{entity}" % (config['dirs']['intermediate'], config['stepnames']['excavator_trio'])),
    output:
        "{prefix}%s%s/{snupy_instance}/{project}/{entity}.trio.uploaded" % (config['dirs']['intermediate'], config['stepnames']['snupy_upload'])
    log:
        "{prefix}%s%s/{snupy_instance}/{project}/{entity}.trio.log" % (config['dirs']['logs'], config['stepnames']['snupy_upload'])
    benchmark:
        "{prefix}%s%s/{snupy_instance}/{project}/{entity}.trio.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['snupy_upload'])
    threads:
        1
    run:
        # excavator rules produces a directory. Thus, we need to manually define the correct filepath to the VCF file
        # for other programs, the VCF file is directly specified as the input.
        vcf_files = []
        for file in input:
            if config['stepnames']['excavator_trio'] in file:
                patient = get_role(wildcards.project, wildcards.entity, 'patient', SAMPLESHEETS).split('/')[-1]
                vcf_files.append("%s%s%s/%s/%s/Results/%s/EXCAVATORRegionCall_%s.vcf" % (wildcards.prefix, config['dirs']['intermediate'], config['stepnames']['excavator_trio'], wildcards.project, wildcards.entity, patient, patient))
                continue
            vcf_files.append(file)
        upload_to_snupy(wildcards.project, wildcards.entity, vcf_files, config, SAMPLESHEETS, output, log, _type='trio', snupy_instance=wildcards.snupy_instance)


rule snupy_extractsamples:
    input:
        "{prefix}%s%s/{snupy_instance}/{project}/{entity}.{type}.uploaded" % (config['dirs']['intermediate'], config['stepnames']['snupy_upload'])
    output:
        "{prefix}%s%s/{snupy_instance}/{project}/{entity}.{type,background|tumornormal|trio}.extracted" % (config['dirs']['intermediate'], config['stepnames']['snupy_extractsamples'])
    log:
        "{prefix}%s%s/{snupy_instance}/{project}/{entity}.{type}.log" % (config['dirs']['logs'], config['stepnames']['snupy_extractsamples'])
    benchmark:
        "{prefix}%s%s/{snupy_instance}/{project}/{entity}.{type}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['snupy_extractsamples'])
    threads:
        1
    run:
        extractsamples(input, config, SAMPLESHEETS, output, log, wildcards.type, snupy_instance=wildcards.snupy_instance)
